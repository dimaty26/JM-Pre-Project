package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserDaoJDBCImpl implements UserDao {

    private final Util util = new Util();

    public UserDaoJDBCImpl() {

    }

    public void createUsersTable() {

        Statement statement = null;
        try (Connection connection = util.getConnection()) {
            String query = "create Table IF NOT EXISTS public.users" +
                    " ( id bigint," +
                    " name varchar(255)," +
                    " last_name varchar(255)," +
                    " age smallint," +
                    "PRIMARY KEY (id) );";
            statement = connection.createStatement();
            statement.executeUpdate(query);

            String query2 = "ALTER TABLE public.users\n" +
                    " ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY;";
            statement.executeUpdate(query2);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    public void dropUsersTable() {

        Statement statement = null;
        try (Connection connection = util.getConnection()) {
            String query = "DROP TABLE IF EXISTS Users";
            statement = connection.createStatement();
            statement.executeUpdate(query);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    public void saveUser(String name, String lastName, byte age) {

        try (Connection connection = util.getConnection()) {
            String sqlQuery = "insert into users (name, last_name, age) values (?, ?, ?);";

            PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery);
            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);

            int rows = preparedStatement.executeUpdate();

            if (rows > 0) {
                System.out.println("User with the name " + name + " was added to DB.");
            }
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    public void removeUserById(long id) {

        try (Connection connection = util.getConnection()) {
            String sqlQuery = "DELETE FROM users WHERE id=?";
            PreparedStatement statement = connection.prepareStatement(sqlQuery);

            statement.setLong(1, id);

            statement.executeUpdate();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

    }

    public List<User> getAllUsers() {

        List<User> users = new ArrayList<>();

        try (Connection connection = util.getConnection()) {

            String sqlQuery = "SELECT * FROM users";
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(sqlQuery);

            while (resultSet.next()) {

                long id = resultSet.getLong("id");
                String name = resultSet.getString("name");
                String lastName = resultSet.getString("last_name");
                byte age = resultSet.getByte("age");

                User user = new User(name, lastName, age);
                user.setId(id);

                users.add(user);
            }
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

        return users;
    }

    public void cleanUsersTable() {

        try (Connection connection = util.getConnection()) {

            String sqlQuery = "DELETE FROM users";
            Statement statement = connection.createStatement();

            statement.executeUpdate(sqlQuery);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }
}
